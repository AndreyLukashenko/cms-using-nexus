// Generated by CoffeeScript 1.9.2
(function() {
  var WebSocketServer, accept, add_post, content, delete_post, determine_message, file, fs, http, save_to_file, send_content, send_token, site_socket, st, token, update_post, wss;

  http = require('http');

  st = require('node-static');

  file = new st.Server('.');

  WebSocketServer = new require('ws');

  fs = require('fs');

  wss = new WebSocketServer.Server({
    port: 8081
  });

  token = Math.random().toString(36).substr(2);

  site_socket = void 0;

  content = JSON.parse(fs.readFileSync('./data/content.json', 'utf8'));

  wss.on('connection', function(ws) {
    return ws.on('message', function(message) {
      determine_message(JSON.parse(message), ws);
    });
  });

  determine_message = function(message, ws) {
    switch (message.type) {
      case 'auth_site':
        site_socket = ws;
        send_token(ws);
        break;
      case 'get_content':
        if (message.auth_token === token) {
          send_content(ws);
        }
        break;
      case 'auth_cms':
        if (message.login === 'admin' && message.pass === '123') {
          send_token(ws);
        } else {
          ws.send(JSON.stringify({
            type: 'auth',
            status: 'error'
          }));
        }
        break;
      case 'update':
        if (message.auth_token === token) {
          update_post(message);
        }
        break;
      case 'add':
        if (message.auth_token === token) {
          add_post(message);
        }
        break;
      case 'delete':
        if (message.auth_token === token) {
          delete_post(message);
        }
    }
  };

  send_content = function(ws) {
    ws.send(JSON.stringify({
      type: 'content',
      body: JSON.stringify(content)
    }));
  };

  send_token = function(ws) {
    ws.send(JSON.stringify({
      type: 'auth',
      auth_token: token
    }));
  };

  update_post = function(message) {
    var post;
    if (site_socket && site_socket.readyState === 1) {
      site_socket.send(JSON.stringify(message));
    }
    post = JSON.parse(message.body);
    content.forEach(function(item) {
      if (item.id === post.id) {
        item.title = post.title;
        item.post_content = post.post_content;
        return item.date = post.date;
      }
    });
    save_to_file();
  };

  add_post = function(message) {
    if (site_socket && site_socket.readyState === 1) {
      site_socket.send(JSON.stringify(message));
    }
    content.unshift(JSON.parse(message.body));
    save_to_file();
  };

  delete_post = function(message) {
    var post;
    if (site_socket && site_socket.readyState === 1) {
      site_socket.send(JSON.stringify(message));
    }
    content = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = content.length; i < len; i++) {
        post = content[i];
        if (post.id !== message.id) {
          results.push(post);
        }
      }
      return results;
    })();
    save_to_file();
  };

  save_to_file = function() {
    return fs.writeFile('./data/content.json', JSON.stringify(content), function(err) {
      if (err) {
        return console.log(err);
      }
    });
  };

  accept = function(req, res) {
    file.serve(req, res);
  };

  http.createServer(accept).listen(8080);

  console.log('Server running on port 8080');

}).call(this);
